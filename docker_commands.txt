# ========== DOCKER KOMUTLARI REHBERI ==========

# 1. TEMEL KOMUTLAR
# -----------------

# Tüm containerları ve volumeleri temizle
docker-compose down -v

# Docker volume'lerini temizle
docker volume prune -f

# Sistemi yeniden başlat (ve build et)
docker-compose up --build -d

# Sadece başlat (build etmeden)
docker-compose up -d

# Container loglarını görüntüle
docker-compose logs -f                  # Tüm containerlar için
docker-compose logs -f postgres         # Spesifik container için
docker-compose logs -f php              # PHP container'ı için

# Container durumlarını kontrol et
docker ps                              # Çalışan containerlar
docker ps -a                           # Tüm containerlar (durmuş olanlar dahil)

# ========== POSTGRESQL KOMUTLARI ==========

# PostgreSQL container'ına bağlan
docker exec -it blog_postgres bash

# PostgreSQL CLI'ya doğrudan bağlan
docker exec -it blog_postgres psql -U bloguser -d blog_db

# Tabloları listele
docker exec -it blog_postgres psql -U bloguser -d blog_db -c "\dt"

# PostgreSQL loglarını görüntüle
docker exec -it blog_postgres tail -f /var/log/postgresql/postgresql-14-main.log

# Veritabanı yedeği al
docker exec blog_postgres pg_dump -U bloguser blog_db > backup.sql

# Veritabanı yedeğini geri yükle
cat backup.sql | docker exec -i blog_postgres psql -U bloguser -d blog_db

# Schema dosyasını manuel yükle
docker cp database/schema.sql blog_postgres:/schema.sql
docker exec -it blog_postgres psql -U bloguser -d blog_db -f /schema.sql

# ========== PHP CONTAINER KOMUTLARI ==========

# PHP container'ına bağlan
docker exec -it blog_php bash

# PHP versiyonunu kontrol et
docker exec -it blog_php php -v

# PHP modüllerini listele
docker exec -it blog_php php -m

# ========== PGADMIN ERIŞIM BILGILERI ==========
# URL: http://localhost:5050
# Email: admin@admin.com
# Şifre: admin123

# ========== POSTGRESQL BAĞLANTI BILGILERI ==========
# Host: postgres
# Port: 5432
# Database: blog_db
# Username: bloguser
# Password: blogpass123

# ========== HATA AYIKLAMA ==========

# Container'ın çalışıp çalışmadığını kontrol et
docker container ls

# Container'ın durumunu detaylı görüntüle
docker inspect blog_postgres

# Container'ın sistem kaynaklarını görüntüle
docker stats

# Container'ın ağ ayarlarını kontrol et
docker network ls
docker network inspect blog_network

# ========== TEMIZLIK KOMUTLARI ==========

# Kullanılmayan container'ları temizle
docker container prune

# Kullanılmayan image'ları temizle
docker image prune -a

# Kullanılmayan volumeleri temizle
docker volume prune

# Kullanılmayan ağları temizle
docker network prune

# Tüm Docker kaynaklarını temizle (DİKKAT: Tüm veriler silinir!)
docker system prune -a --volumes

# ========== YARDIMCI KOMUTLAR ==========

# Docker versiyonunu görüntüle
docker --version
docker-compose --version

# Docker disk kullanımını görüntüle
docker system df

# Docker olaylarını görüntüle
docker events

# NOT: Bu komutları kullanırken dikkatli olun ve production ortamında
# kullanmadan önce mutlaka test edin. Özellikle prune ve down -v gibi
# komutlar veri kaybına neden olabilir. 